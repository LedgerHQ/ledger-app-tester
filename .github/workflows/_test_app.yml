name: Test an App

on:
  workflow_call:


env:
  CTEST_OUTPUT_ON_FAILURE: 1
  PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION: python


jobs:
  define_apps:
    name: Get applications list
    runs-on: ubuntu-latest
    outputs:
      apps_config: ${{ steps.apps_list.outputs.apps_config }}

    steps:
      - name: Download Binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: apps_config

      - name: Define the list of applications
        id: apps_list
        run: |
          APPS_CONFIG=$(cat apps_config.json)
          echo "APPS_CONFIG=${APPS_CONFIG}"
          echo "apps_config=${APPS_CONFIG}" >> "$GITHUB_OUTPUT"

      - name: Print matrix
        run: |
          echo "Matrix content: ${{ steps.apps_list.outputs.apps_config }}"

  run_all:
    name: Run for all targets
    needs: [define_apps]
    strategy:
      fail-fast: false
      matrix:
        repo_info: ${{ fromJson(needs.define_apps.outputs.apps_config) }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ledgerhq/ledger-app-builder/ledger-app-dev-tools:latest
    steps:
      - name: Clone Repo
        uses: actions/checkout@v4
        with:
          repository: LedgerHQ/ledger-app-tester
          path: ledger-app-tester

      - name: Clone App
        uses: actions/checkout@v4
        with:
          repository: LedgerHQ/${{ matrix.repo_info.repo_name }}
          path: ${{ matrix.repo_info.repo_name }}
          submodules: recursive
          token: ${{ secrets.CI_BOT_TOKEN }}

      - name: Download Binaries artifact
        uses: actions/download-artifact@v4
        with:
          name: binaries_all

      - name: Prepare test conditions
        id: prepare_test
        run: |
          apt-get install --no-install-recommends -y qemu-user-static tesseract-ocr libtesseract-dev
          pip install --break-system-packages -r ledger-app-tester/requirements.txt
          pip install --break-system-packages toml-cli

          # Initial build args
          ARGS="-v -a ${{ matrix.repo_info.repo_name }}"

          # Get Test directory from manifest
          TEST_DIR=$(ledger-manifest -otp "${{ matrix.repo_info.repo_name }}/ledger_app.toml")
          if [ -z "${TEST_DIR}" ]; then
            echo "No test directory found" && exit 1
          fi

          # Install dedicated dependencies
          TEST_DIR="${{ matrix.repo_info.repo_name }}/${TEST_DIR}"
          if [ -f "${TEST_DIR}/requirements.txt" ]; then
            pip install --break-system-packages -r "${TEST_DIR}/requirements.txt"
          fi
          if [ -f "${TEST_DIR}/setup_script.sh" ]; then
            "${TEST_DIR}"/setup_script.sh
          fi

          echo "CMD_ARGS=${ARGS}" >> "$GITHUB_ENV"
          echo "CMD_ARGS=${ARGS}"

          # Copy elf dependencies
          APP_DEPS=$(jq --arg name "${{ matrix.repo_info.repo_name }}" -r '.[] | select(.name == $name) | .dependencies' ledger-app-tester/input_files/test_info.json)
          if [ "${APP_DEPS}" != null ]; then
            for app in ${APP_DEPS}; do
              DEST="${TEST_DIR}/.test_dependencies/${app#*-}"
              echo "Installing ${app} in ${DEST}...."
              mkdir -p "${DEST}"
              cp -r "${app}/build" "${DEST}/"
            done
          fi

      - name: Run Test
        if: ${{ always() && (steps.prepare_test.outcome == 'success') }}
        id: run_test
        run: |
          # shellcheck disable=SC2086
          ./ledger-app-tester/scripts/test_app.sh ${{ env.CMD_ARGS}}
      - name: Check Test failure
        if: ${{ always() && (steps.run_test.outcome == 'skipped') }}
        shell: bash
        run: |
          echo -n "|:construction:" >> test_status_${{ matrix.repo_info.repo_name }}.md
          echo -e "\tâ€¢ ${{ matrix.repo_info.repo_name }}: All" >> test_errors_${{ matrix.repo_info.repo_name }}.md

      - name: Archive Status
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_status_${{ matrix.repo_info.repo_name }}
          path: test_status_${{ matrix.repo_info.repo_name }}.md

      - name: Archive Error
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test_errors_${{ matrix.repo_info.repo_name }}
          path: test_errors_${{ matrix.repo_info.repo_name }}.md
          if-no-files-found: ignore
